# -*- toc-org-max-depth: 4; -*-

#+TITLE: Hoppla Emacs
#+OPTIONS: todo:nil
#+STARTUP: show4levels
#+PROPERTY: header-args:elisp :tangle yes :results silent

* Table of Content                                                      :TOC:
- [[#intro][Intro]]
  - [[#quick-start][Quick Start]]
    - [[#clone-the-repository][Clone the Repository]]
    - [[#install-dependencies-incomplete][Install Dependencies (incomplete)]]
    - [[#build-run-install][Build, Run, Install]]
  - [[#configuration][Configuration]]
    - [[#home-manager-example][home-manager example]]
- [[#basic-configuration][Basic Configuration]]
  - [[#custom-file][Custom file]]
  - [[#package-management][Package Management]]
  - [[#startup-performance][Startup Performance]]
  - [[#keybindings][Keybindings]]
    - [[#evil][evil]]
    - [[#which-key][which-key]]
    - [[#general][general]]
    - [[#hydra][hydra]]
  - [[#recent-files][Recent Files]]
  - [[#helpful][Helpful]]
  - [[#indents][Indents]]
  - [[#auto-revert-reload-buffer-on-file-change][Auto Revert (Reload Buffer on file change)]]
  - [[#confirm-with-yp][Confirm with y/p]]
  - [[#reload-user-config][Reload user config]]
- [[#ui][UI]]
  - [[#basics][Basics]]
    - [[#fonts][Fonts]]
    - [[#line--column-numbers][Line / Column Numbers]]
    - [[#improved-scrolling][Improved Scrolling]]
  - [[#windows][Windows]]
    - [[#move-border][move-border]]
    - [[#ace-window][ace-window]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#dashboard][Dashboard]]
  - [[#search][Search]]
- [[#plugins][Plugins]]
  - [[#org][Org]]
    - [[#appearance][Appearance]]
      - [[#center-buffer][Center Buffer]]
      - [[#auto-tangle][Auto-tangle]]
      - [[#misc][Misc]]
  - [[#essentials][Essentials]]
    - [[#dired][dired]]
    - [[#magit][magit]]
    - [[#projectile][projectile]]
    - [[#perspective][perspective]]
    - [[#terminal][terminal]]
      - [[#vterm][vterm]]
    - [[#movement][movement]]
      - [[#avy][avy]]
  - [[#completion--search][Completion & Search]]
    - [[#ivy-counsel-swiper][ivy, counsel, swiper]]
    - [[#company][company]]
    - [[#ripgrep][ripgrep]]
  - [[#misc-1][Misc]]
    - [[#no-littering][no-littering]]
    - [[#org-reveal-presentations][org-reveal (presentations)]]
  - [[#development][Development]]
    - [[#treesitter][Treesitter]]
    - [[#lsp][LSP]]
      - [[#lsp-ui][lsp-ui]]
      - [[#lsp-ivy][lsp-ivy]]
    - [[#languages][Languages]]
      - [[#c--c][C / C++]]
      - [[#python][Python]]
      - [[#nix][Nix]]
      - [[#yaml][Yaml]]
      - [[#ansible][Ansible]]
    - [[#misc-2][Misc]]
      - [[#comments][Comments]]
      - [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#runtime][Runtime]]
  - [[#performance][Performance]]

* Intro

+ emacs part inspired by [[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch]].
  + theoretically compatible with non-nix emacs
  + some packages might not be available in the normal elpa, melpa, ... archives
+ nix part uses [[https://github.com/nix-community/emacs-overlay][emacs-overlay]] to offer
  + a nix package that also includes all emacs packages used by this configuration
  + uses emacs-overlay's =emacsWithPackagesFromUsePackage= to automatically
    generate the list of nix emacsPackages

** Quick Start

*** Clone the Repository

#+begin_src bash

# backup your current config
mv ~/.config/emacs ~/.config/emacs.bak
# clone the repo
git clone <repo-url> ~/.config/emacs
cd ~/.config/emacs

#+end_src

*** Install Dependencies (incomplete)

#+begin_src bash

# show full list of dependencies
nix eval --json '.#dependencies.x86_64-linux' | jq -r 'to_entries[] | .key'

# install all dependencies
nix eval --json '.#dependencies.x86_64-linux' | jq -r 'to_entries[] | .key' \
    | xargs -i nix profile install 'nixpkgs#{}'

#+end_src

**** TODO complete list of dependencies                         :noexport:

*** Build, Run, Install

#+begin_src bash

# to build it
nix build '.#hoppla-emacs'
# or to directly run it
nix run '.#hoppla-emacs'
# or to install it
nix profile install '.#hoppla-emacs'

#+end_src
    
** Configuration

~hoppla-emacs~ exposes some variables that can be overwritten in order to change the appearance or behaviour.
The variables and their default values can be found in [[./etc/defaults.org]] and can be overwritten with a
[[./etc/user.el]] file.

*** home-manager example

flake.nix

#+begin_src nix

{
  description = "Example";

  inputs = {
    nixpkgs = "github:NixOS/nixpkgs/nixos-23.05";
    nixpkgs-unstable = "github:NixOS/nixpkgs/nixos-unstable";

    hoppla-emacs = {
      url = "github:hoppla20/hoppla-emacs";
      inputs.nixpkgs.follow = "unstable";
    };
    emacs-libvterm = {
      url = "github:akermu/emacs-libvterm";
      flake = false;
    };
  };
}

#+end_src

home-manager-config.nix

#+begin_src nix

{
  pkgs,
  inputs,
  darkTheme ? true,
  ...
}: let
  catppuccinTheme =
    if darkTheme
    then "macchiato"
    else "latte";
in {
  programs.emacs = {
    enable = true;
    package = inputs.hoppla-emacs.packages.${pkgs.system}.hoppla-emacs;
  };

  services.emacs = {
    enable = true;
    client.enable = true;
    socketActivation.enable = true;
  };

  home.packages = builtins.attrValues inputs.hoppla-emacs.${pkgs.system}.dependencies;

  xdg.configFile."emacs/etc/user.el".text = ''
    (setq hoppla/catppuccin-flavor '${catppuccinTheme})
    (setq hoppla/extra-workspace-dirs '(("/etc/nixos" . 0)
                                        ("~/.config/emacs" . 0)))
  '';

  programs.bash.initExtra = l.readFile "${inputs.emacs-libvterm}/etc/emacs-vterm-bash.sh";
  programs.zsh.initExtra = l.readFile "${inputs.emacs-libvterm}/etc/emacs-vterm-zsh.sh";
}

#+end_src

**** TODO fully working example                                 :noexport:

* Basic Configuration

** Custom file

#+begin_src elisp

(setq custom-file (no-littering-expand-etc-file-name "custom.el"))

#+end_src

** Package Management

+ [[https://github.com/jwiegley/use-package][GitHub]]

#+begin_src elisp

(require 'package)
(if hoppla/nix-managed-plugins
    (setq package-archives '())
  (setq package-archives '(("melpa"       . "https://melpa.org/packages/")
                           ("melpaStable" . "https://stable.melpa.org/packages/")
                           ("nongnu"      . "https://elpa.nongnu.org/nongnu/")
                           ("elpa"        . "https://elpa.gnu.org/packages/")
                           ("elpaDevel"   . "https://elpa.gnu.org/devel/"))))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(setq use-package-always-ensure t)
(unless (or hoppla/nix-managed-plugins (package-installed-p 'use-package))
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

#+end_src

** Startup Performance

https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

#+begin_src elisp

(setq gc-cons-threshold (* 100 1024 1024))

(setq file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun hoppla/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'hoppla/display-startup-time)

#+end_src

** Keybindings

#+begin_src elisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** evil

+ GitHub
  + [[https://github.com/emacs-evil/evil][evil]]
  + [[https://github.com/emacs-evil/evil-collection][evil-collection]]

#+begin_src elisp

(use-package goto-chg)
(use-package evil
  :after goto-chg
  :init
  (setq evil-undo-system 'undo-redo
        evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-i-jump t
        evil-want-C-u-scroll t
        evil-overriding-maps nil)
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

*** which-key

+ [[https://github.com/justbur/emacs-which-key][GitHub]]

#+begin_src elisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :init
  (setq which-key-show-early-on-C-h t)
  (setq which-key-idle-delay 1.5)
  (setq which-key-idle-secondary-delay 0.05)
  :config
  (which-key-mode 1))

#+end_src

*** general

+ [[https://github.com/noctuid/general.el][GitHub]]

#+begin_src elisp

(defun hoppla/other-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(use-package general
  :after evil
  :config
  (general-evil-setup)
  (general-create-definer hoppla/leader-def
    :states '(normal insert emacs)
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/leader-prefix-map)
  (hoppla/leader-def "t" '(:ignore t :wk "toggles"))
  (hoppla/leader-def "b" '(:ignore t :wk "buffers"))
  (hoppla/leader-def "f" '(:ignore t :wk "files"))
  (hoppla/leader-def "g" '(:ignore t :wk "git"))
  (hoppla/leader-def "h" '(:ignore t :wk "help"))
  (hoppla/leader-def "d" '(:ignore t :wk "desktops"))
  (hoppla/leader-def "p" '(:ignore t :wk "projects"))
  (hoppla/leader-def "P" '(:ignore t :wk "perspectives"))
  (hoppla/leader-def "d" '(:ignore t :wk "directories"))
  (hoppla/leader-def "s" '(:ignore t :wk "search"))

  (hoppla/leader-def "bi" '(ibuffer :wk "ibuffer"))
  (hoppla/leader-def "bk" '(kill-current-buffer :wk "kill current buffer"))
  (hoppla/leader-def "bo" '(hoppla/other-buffer :wk "switch to other buffer"))
  (hoppla/leader-def "fr" '(recentf :wk "find recent file")))

#+end_src

*** hydra

#+begin_src elisp

(use-package dash
  :config
  (global-dash-fontify-mode))
(use-package s)
(use-package hydra)
(use-package major-mode-hydra
  :defer nil
  :after (hydra dash s)
  :general
  (hoppla/leader-def "m" '(major-mode-hydra :wk "major"))
  :config
  (major-mode-hydra-define emacs-lisp-mode
                           (:title "elisp mode" :quit-key "q")
                           ("Eval"
                            (("b" eval-buffer "buffer")
                             ("e" eval-defun "defun")
                             ("r" eval-region "region"))
                            "REPL"
                            (("I" ielm "ielm"))
                            "Test"
                            (("t" ert "prompt")
                             ("T" (ert t) "all")
                             ("F" (ert :failed) "failed"))
                            "Doc"
                            (("d" describe-foo-at-point "thing-at-point")
                             ("f" describe-function "function")
                             ("v" describe-variable "variable")
                             ("i" info-lookup-symbol "info lookup")))))

#+end_src

** Recent Files

#+begin_src elisp

(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

#+end_src

** Helpful

#+begin_src elisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :init
  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)
  :general
  ([remap describe-function] 'counsel-describe-function)
  ([remap describe-variable] 'counsel-describe-variable)
  ([remap describe-command] 'helpful-command)
  ([remap describe-key] 'helpful-key)
  (hoppla/leader-def "hf" '(describe-function :wk "describe function"))
  (hoppla/leader-def "hc" '(describe-command :wk "describe command"))
  (hoppla/leader-def "hv" '(describe-variable :wk "describe variable"))
  (hoppla/leader-def "hk" '(describe-key :wk "describe key")))

#+end_src

** Indents

#+begin_src elisp

;; buffer local
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

#+end_src

** Auto Revert (Reload Buffer on file change)

#+begin_src elisp

(auto-revert-mode 1)

#+end_src

** Confirm with y/p

#+begin_src elisp

(defalias 'yes-or-no-p 'y-or-n-p)

#+end_src

** Reload user config

#+begin_src elisp

(defun hoppla/reload-config (&optional cfg)
  (interactive)
  (let ((cfg (or cfg "all")))
    (cond ((string= cfg "user") (load-file hoppla/user-file))
          (t (load-file (expand-file-name "init.el" user-emacs-directory))))
    (hoppla/reload-theme)))
(defun hoppla/reload-user-config ()
  (interactive)
  (hoppla/reload-config "user"))

#+end_src

* UI
** Basics

#+begin_src elisp

(when (window-system)
  (tool-bar-mode -1))

(set-fringe-mode 10)

#+end_src

*** Fonts

#+begin_src elisp

(add-to-list 'default-frame-alist `(font . ,hoppla/default-font))
(use-package nerd-icons)

#+end_src

*** Line / Column Numbers

#+begin_src elisp

(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Improved Scrolling

#+begin_src elisp

(setq mouse-whell-scroll-amount '(1 ((shift) . 1)))
(setq mouse-whell-progressive-speed nil)
(setq mouse-wheel-follow-mouse t)
(setq scroll-step 1)

#+end_src

** Windows

*** move-border

- [[https://github.com/ramnes/move-border][GitHub]]
  - not on elpa, melpa, ...

#+begin_src elisp

(defun hoppla/xor (b1 b2)
  (or (and b1 b2)
      (and (not b1) (not b2))))

(defun hoppla/move-border-left-or-right (arg dir)
  "General function covering move-border-left and move-border-right. If DIR is
     t, then move left, otherwise move right."
  (interactive)
  (if (null arg) (setq arg 1))
  (let ((left-edge (nth 0 (window-edges))))
    (if (hoppla/xor (= left-edge 0) dir)
        (shrink-window arg t)
      (enlarge-window arg t))))

(defun hoppla/move-border-up-or-down (arg dir)
  "General function covering move-border-up and move-border-down. If DIR is
     t, then move up, otherwise move down."
  (interactive)
  (if (null arg) (setq arg 1))
  (let ((top-edge (nth 1 (window-edges))))
    (if (hoppla/xor (= top-edge 0) dir)
        (shrink-window arg nil)
      (enlarge-window arg nil))))

(defun hoppla/move-border-left (arg)
  (interactive "P")
  (hoppla/move-border-left-or-right arg t))

(defun hoppla/move-border-right (arg)
  (interactive "P")
  (hoppla/move-border-left-or-right arg nil))

(defun hoppla/move-border-up (arg)
  (interactive "P")
  (hoppla/move-border-up-or-down arg t))

(defun hoppla/move-border-down (arg)
  (interactive "P")
  (hoppla/move-border-up-or-down arg nil))

#+end_src

**** TODO extract into own package                              :noexport:

*** ace-window

+ [[https://github.com/abo-abo/ace-window][GitHub]]

#+begin_src elisp

(use-package ace-window
  :after evil
  :general
  (hoppla/leader-def "w" '(ace-window-hydra/body :wk "windows"))
  :init
  (defun hoppla/zoom-reset () (interactive) (text-scale-adjust 0) (message nil))
  :pretty-hydra
  ((:title "Windows" :color amaranth :quit-key "q")
   ("Actions"
    (("x" delete-window "delete")
     ("X" ace-delete-window "delete (ace)")
     ("m" ace-delete-other-windows "maximize")
     ("S" ace-swap-window "swap")
     ("a" ace-select-window "select"))
    "Movement"
    (("h" evil-window-left "←")
     ("j" evil-window-down "↓")
     ("k" evil-window-up "↑")
     ("l" evil-window-right "→"))
    "Resize"
    (("H" hoppla/move-border-left "←")
     ("J" hoppla/move-border-down "↓")
     ("K" hoppla/move-border-up "↑")
     ("L" hoppla/move-border-right "→")
     ("n" balance-windows "balance")
     ("f" toggle-frame-fullscreen "toggle fullscreen"))
    "Split"
    (("s" evil-window-split "horizontal")
     ("v" evil-window-vsplit "vertical"))
    "Zoom"
    (("+" text-scale-increase "in")
     ("=" text-scale-increase "in")
     ("-" text-scale-decrease "out")
     ("0" hoppla/zoom-reset "reset")))))

#+end_src

** Modeline

#+begin_src elisp

(line-number-mode 1)
(column-number-mode 1)

(use-package doom-modeline
  :after nerd-icons
  :config
  (setq doom-modeline-height 30)
  (setq doom-modeline-height 30)
  :init
  (doom-modeline-mode 1))

#+end_src

** Theme

+ [[https://github.com/catppuccin/emacs][GitHub]]

#+begin_src elisp

(use-package catppuccin-theme
  :init
  (setq catppuccin-flavor hoppla/catppuccin-flavor)
  :config
  (load-theme 'catppuccin :no-confirm)
  (defun hoppla/reload-theme ()
    (interactive)
    (setq catppuccin-flavor hoppla/catppuccin-flavor)
    (load-theme 'catppuccin :no-confirm)))

#+end_src

** Dashboard

#+begin_src elisp

(use-package dashboard
  :after (nerd-icons projectile)
  :init
  (setq dashboard-center-content t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons) 
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-projects-switch-function 'projectile-persp-switch-project)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
  :config
  (dashboard-setup-startup-hook)
  ;; display dashboard when starting emacsclient
  (general-nmap "gD" '(dashboard-open :wk "go to dashboard"))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))

#+end_src

** Search

#+begin_src elisp

(use-package anzu
  :general
  (:keymaps 'isearch-mode-map [remap isearc-query-replace] 'ansu-isearch-query-replace)
  (:keymaps 'isearch-mode-map [remap isearc-query-replace-regexp] 'ansu-isearch-query-replace-regexp)
  :config
  (global-anzu-mode 1))
(use-package evil-anzu
  :after (anzu evil))

#+end_src

* Plugins

** Org

+ [[https://orgmode.org/org.html][Manual]]

#+begin_src elisp

(use-package org
  :mode ("\\.org$" . org-mode)
  :init
  (setq org-startup-indented t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t))
(use-package org-tempo
  :ensure org
  :after org
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src elisp")))
(use-package toc-org
  :hook ((org-mode . toc-org-mode)
         (markdown-mode . toc-org-mode))
  :general
  (:states 'normal :keymaps 'markdown-mode-map "C-c C-o" 'toc-org-markdown-follow-thing-at-point))

#+end_src

*** Appearance

**** Center Buffer

#+begin_src elisp

(defun hoppla/org-mode-visual-fill ()
  (setq visual-fill-column-width 120)
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
(use-package visual-fill-column
  :after org
  :hook (org-mode . hoppla/org-mode-visual-fill))

#+end_src

**** Auto-tangle

#+begin_src elisp

(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

**** Misc

#+begin_src elisp

(use-package org-sticky-header
  :after org
  :hook (org-mode . org-sticky-header-mode))
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode))

#+end_src

** Essentials

*** dired

#+begin_src elisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :init
  (setq dired-listing-switches "-lah --group-directories-first")
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
  :general
  (hoppla/leader-def "dd" 'dired)
  (hoppla/leader-def "dj" 'dired-jump))
(use-package dired-single
  :commands (dired dired-jump))
(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))
(use-package dired-open
  :commands (dired dired-jump)
  :init
  (setq dired-open-extensions '(("pdf" . "evince"))))
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

*** magit

+ [[https://magit.vc/manual/magit/][Manual]]

#+begin_src elisp

(use-package magit
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  :general
  (hoppla/leader-def "gg" 'magit))

#+end_src

*** projectile

#+begin_src elisp

(use-package projectile
  :after rg
  :diminish projectile-mode
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-switch-project-action 'projectile-find-file)
  (when (file-directory-p hoppla/workspace-dir)
    (setq projectile-project-search-path (append `((,hoppla/workspace-dir . 2)) hoppla/extra-workspace-dirs)))
  :config
  (projectile-mode 1)
  (general-def :states '(normal insert emacs)
    :keymaps 'projectile-mode-map
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/projectile-leader-prefix-map
    "ff" '(projectile-find-file :wk "search for project file")
    "fd" '(projectile-find-dir :wk "search for project directory")
    "fr" '(projectile-recentf :wk "find recent project file")
    "pp" '(projectile-switch-project :wk "switch project")
    "po" '(projectile-switch-open-project :wk "switch open projects")
    "pa" '(projectile-add-project :wk "add project")
    "pd" '(projectile-discover-projects-in-search-path :wk "discover projects")
    "sr" '(projectile-ripgrep :wk "ripgrep (project)")
    "sR" '(rg-menu :wk "ripgrep")))
(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode 1))

#+end_src

*** perspective

#+begin_src elisp

(use-package perspective
  :defer nil
  :hook (kill-emacs . persp-state-save)
  :after counsel
  :init
  (unless (file-exists-p hoppla/persp-states-dir)
    (make-directory hoppla/persp-states-dir))
  (setq persp-state-default-file (expand-file-name "default.el" hoppla/persp-states-dir))
  (setq persp-suppress-no-prefix-key-warning t)
  :config
  (persp-mode 1)
  (general-def :states '(normal insert emacs)
    :keymaps 'persp-mode-map
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/persp-leader-prefix-map
    "bi" '(persp-ibuffer :wk "ibuffer")
    "bI" '(ibuffer :wk "ibuffer")
    "bs" '(persp-counsel-switch-buffer :wk "switch buffer")
    "bS" '(counsel-switch-buffer :wk "switch buffer (all perspectives)")
    "br" '(persp-remove-buffer :wk "remove buffer")
    "bA" '(persp-add-buffer :wk "add buffer to global perspective")
    "bG" '(persp-add-buffer-to-frame-global :wk "add buffer to global perspective")

    "Ps" '(persp-switch :wk "switch perspective")
    "Po" '(persp-switch-last :wk "switch to last perspective")
    "Pi" '(persp-import :wk "import perspective from another frame")
    "Pr" '(persp-rename :wk "rename perspective")
    "Pk" '(persp-kill :wk "kill perspective")
    "P[" '(persp-prev :wk "previous perspective")
    "P]" '(persp-next :wk "next perspective")
    "Pm" '(persp-merge :wk "merge perspective")
    "Pu" '(persp-unmerge :wk "unmerge perspective")
    "PS" '(persp-state-save :wk "save all perspectives")
    "PL" '(persp-state-load :wk "load perspectives")))
(use-package persp-projectile
  :after (perspective projectile)
  :config
  (general-def :states '(normal insert emacs)
    :keymaps 'persp-mode-map
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/persp-leader-prefix-map
    "Pp" '(projectile-persp-switch-project :wk "switch project (clean perspective)")))

#+end_src

*** terminal

**** vterm

#+begin_src elisp

(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
(use-package multi-vterm
  :general
  (hoppla/leader-def "tt" '(multi-vterm-dedicated-toggle :wk "toggle terminal"))
  (hoppla/leader-def "pt" '(multi-vterm-project :wk "toggle terminal"))
  :init
  (setq multi-vterm-dedicated-window-height 30)
  :config
  (major-mode-hydra-define vterm-mode
    (:title "vterm mode" :quit-key "q")
    ("Switch"
     (("+" multi-vterm "create new")
      ("r" multi-vterm-rename-buffer "rename buffer")
      ("p" multi-vterm-prev "previous" :color amaranth)
      ("n" multi-vterm-next "next" :color amaranth)))))

#+end_src

*** movement

**** avy

#+begin_src elisp

(use-package avy
  :init
  (setq avy-timeout-seconds 0.8)
  (setq avy-all-windows nil)
  :general
  (:states '(normal visual) :keymaps 'global "C-:" 'avy-goto-char)
  (:states '(normal visual) :keymaps 'global "C-'" 'avy-goto-char-2)
  (general-nmap "gl" 'avy-goto-line)
  (general-nmap "gw" 'avy-goto-word-1)
  (hoppla/leader-def "a" '(avy-goto-char-2 :wk "avy timer"))
  (hoppla/leader-def "r" '(avy-resume :wk "avy resume")))

#+end_src

** Completion & Search

*** ivy, counsel, swiper

+ GitHub
  + [[https://github.com/abo-abo/swiper][ivy, counsel, swiper]]
  + [[https://github.com/Yevgnen/ivy-rich][ivy-rich]]
  + [[https://github.com/radian-software/prescient.el][ivy-prescient]]

+ Tips:
  + Use ~C-c C-o~ to open search results in a new buffer

#+begin_src elisp

(use-package ivy
  :defer nil
  :diminish ivy-mode
  :general
  (general-nmap "C-/" 'swiper)
  (:keymaps 'ivy-minibuffer-map "TAB" 'ivy-alt-done)
  (:keymaps 'ivy-switch-buffer-map "C-d" 'ivy-switch-buffer-kill)
  (:keymaps 'ivy-reverse-i-search-map "C-d" 'ivy-reverse-i-search-kill)
  (:keymaps '(ivy-minibuffer-map ivy-switch-buffer-map ivy-reverse-i-search-map) "C-k" 'ivy-previous-line)
  (:keymaps '(ivy-minibuffer-map ivy-switch-buffer-map ivy-reverse-i-search-map) "C-j" 'ivy-next-line)
  :config
  (ivy-mode 1))
(use-package counsel
  :general
  (hoppla/leader-def "bs" '(counsel-switch-buffer :wk "switch buffer"))
  (hoppla/leader-def "SPC" '(counsel-fzf :wk "find file"))
  (hoppla/leader-def "ff" '(counsel-fzf :wk "find file"))
  (general-nmap "C-p" '(counsel-fzf :wk "find file"))
  :config
  (counsel-mode 1))
(use-package ivy-rich
  :after (ivy counsel)
  :config
  (ivy-rich-mode 1))
(use-package ivy-prescient
  :after (ivy counsel)
  :init
  (setq ivy-prescient-enable-filtering nil)
  :config
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
(use-package ivy-hydra
  :defer t
  :after hydra)

#+end_src

*** company

#+begin_src elisp

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :general
  (:keymaps 'company-active-map "<tab>" 'company-complete-selection)
  (:keymaps 'lsp-mode-map "<tab>" 'company-indent-or-complete-common)
  :init
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0.0))
(use-package company-box
  :after company
  :hook (company-mode . company-box-mode))

#+end_src

*** ripgrep

#+begin_src elisp

(use-package rg
  :config
  (hoppla/leader-def "sr" '(rg-menu :wk "ripgrep")))

#+end_src

** Misc

*** no-littering

#+begin_src elisp

;; no-littering is required in init.el
(no-littering-theme-backups)

#+end_src

*** org-reveal (presentations)

+ [[https://github.com/yjwen/org-reveal/][org-reveal]]

#+begin_src elisp

(use-package htmlize)
(use-package ox-reveal
  :after htmlize
  :config
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

#+end_src

** Development

*** Treesitter

#+begin_src elisp

(use-package tree-sitter
  :after tree-sitter-langs
  :hook (tree-sitter-mode . tree-sitter-hl-mode)
  :config
  (global-tree-sitter-mode 1))
(use-package tree-sitter-langs)

#+end_src

*** LSP

#+begin_src elisp

(defun hoppla/lsp-mode-setup ())

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . hoppla/lsp-mode-setup)
  :init
  (setq read-process-output-max (* 1 1024 1024))
  (setq lsp-keymap-prefix "C-l")
  :config
  (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

#+begin_src elisp

(use-package lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :init
  (setq lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-ivy

#+begin_src elisp

(use-package lsp-ivy
  :after lsp-mode)

#+end_src

*** Languages

**** C / C++

#+begin_src elisp

(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode)
         . (lambda () (require 'ccls) (lsp-deferred))))

#+end_src

**** Python

#+begin_src elisp

(use-package python-mode
  :hook (python-mode . lsp-deferred))
(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))

#+end_src

**** Nix

#+begin_src elisp

(use-package lsp-nix
  :ensure lsp-mode
  :after lsp-mode
  :demand t
  :init
  (setq lsp-nix-nil-formatter ["alejandra"])
  (setq lsp-nix-nil-ignored-diagnostic ["unused_binding"]))
(use-package nix-mode
  :hook (nix-mode . lsp-deferred)
  :mode ("\\.nix\\'" "\\.nix.in\\'"))
(use-package nix-drv-mode
  :ensure nix-mode
  :mode "\\.drv\\'")
(use-package nix-shell
  :ensure nix-mode
  :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
(use-package nix-repl
  :ensure nix-mode
  :commands (nix-repl))

#+end_src

**** Yaml

#+begin_src elisp

(use-package lsp-yaml
  :ensure lsp-mode
  :after lsp-mode
  :demand t)

#+end_src

**** Ansible

#+begin_src elisp

(use-package lsp-ansible
  :ensure lsp-mode
  :after lsp-mode
  :demand t)

#+end_src

*** Misc

**** Comments

+ [[https://github.com/redguardtoo/evil-nerd-commenter][GitHub]]

#+begin_src elisp

(use-package evil-nerd-commenter
  :after evil
  :config
  (evilnc-default-hotkeys))

#+end_src

**** Rainbow Delimiters

#+begin_src elisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Runtime

** Performance

#+begin_src elisp

(run-with-idle-timer
 5 nil
 (lambda ()
   (setq file-name-handler-alist file-name-handler-alist-original)
   (makunbound 'file-name-handler-alist-original)
   (message "file-name-handler-alist restored")))

#+end_src
