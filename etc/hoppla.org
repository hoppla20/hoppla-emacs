# -*- toc-org-max-depth: 4; -*-

#+TITLE: Hoppla Emacs
#+OPTIONS: todo:nil
#+STARTUP: show4levels
#+PROPERTY: header-args:elisp :tangle yes :results silent

* Table of Content                                                      :TOC:
- [[#intro][Intro]]
  - [[#quick-start][Quick Start]]
    - [[#clone-the-repository][Clone the Repository]]
    - [[#install-dependencies-incomplete][Install Dependencies (incomplete)]]
    - [[#build-run-install][Build, Run, Install]]
      - [[#home-manager-example][home-manager example]]
  - [[#configuration][Configuration]]
- [[#known-issues][Known Issues]]
  - [[#terminal-colors][Terminal Colors]]
- [[#basic-configuration][Basic Configuration]]
  - [[#reload-user-config][Reload user config]]
  - [[#package-management][Package Management]]
  - [[#startup-performance][Startup Performance]]
  - [[#keybindings][Keybindings]]
    - [[#evil][evil]]
    - [[#which-key][which-key]]
    - [[#general][general]]
    - [[#hydra][hydra]]
  - [[#recent-files][Recent Files]]
  - [[#helpful][Helpful]]
  - [[#indents][Indents]]
  - [[#auto-revert-reload-buffer-on-file-change][Auto Revert (Reload Buffer on file change)]]
  - [[#always-confirm-with-yn][Always confirm with y/n]]
  - [[#savehist-mode][savehist-mode]]
  - [[#load-env-variables-from-shell][Load env variables from shell]]
- [[#system-configuration][System Configuration]]
- [[#ui][UI]]
  - [[#basics][Basics]]
    - [[#fonts][Fonts]]
    - [[#line--column-numbers][Line / Column Numbers]]
    - [[#improved-scrolling][Improved Scrolling]]
    - [[#terminal-no-background-color][Terminal No Background Color]]
    - [[#syntax-highlighting][Syntax Highlighting]]
  - [[#theme][Theme]]
  - [[#windows][Windows]]
    - [[#transpose-frame][transpose-frame]]
    - [[#move-border][move-border]]
    - [[#zoom][zoom]]
    - [[#ace-window][ace-window]]
  - [[#modeline][Modeline]]
  - [[#tabs-disabled][Tabs (disabled)]]
  - [[#dashboard][Dashboard]]
  - [[#search][Search]]
- [[#indent-guides][Indent Guides]]
- [[#plugins][Plugins]]
  - [[#editorconfig][Editorconfig]]
  - [[#org][Org]]
      - [[#extend-org-hydra-further-or-just-use-evil-org][extend org-hydra further or just use evil-org?]]
    - [[#appearance][Appearance]]
      - [[#center-buffer][Center Buffer]]
      - [[#auto-tangle][Auto-tangle]]
      - [[#misc][Misc]]
  - [[#essentials][Essentials]]
    - [[#dired][dired]]
    - [[#ranger-disabled][ranger (disabled)]]
    - [[#magit][magit]]
    - [[#projectile][projectile]]
    - [[#perspective][perspective]]
    - [[#terminal][terminal]]
      - [[#vterm][vterm]]
    - [[#movement][movement]]
      - [[#avy][avy]]
    - [[#snippets][Snippets]]
      - [[#yasnippet][yasnippet]]
    - [[#relative-buffer-names-disabled][relative-buffer-names (disabled)]]
    - [[#aggressive-indent][aggressive-indent]]
  - [[#completion--search][Completion & Search]]
    - [[#native][native]]
    - [[#icons][icons]]
    - [[#orderless][orderless]]
    - [[#mct-disabled][mct (disabled)]]
    - [[#vertico][vertico]]
    - [[#marginalia-consult][marginalia, consult]]
    - [[#embark][embark]]
    - [[#cape][cape]]
    - [[#corfu][corfu]]
    - [[#ripgrep][ripgrep]]
  - [[#misc-1][Misc]]
    - [[#pdf-tools][pdf-tools]]
    - [[#no-littering][no-littering]]
    - [[#org-reveal-presentations][org-reveal (presentations)]]
  - [[#development][Development]]
    - [[#flycheck][Flycheck]]
    - [[#treesitter][Treesitter]]
    - [[#lsp][LSP]]
      - [[#lsp-ui][lsp-ui]]
    - [[#languages][Languages]]
      - [[#c--c][C / C++]]
      - [[#python][Python]]
      - [[#nix][Nix]]
      - [[#yaml][Yaml]]
      - [[#ansible][Ansible]]
      - [[#markdown][Markdown]]
      - [[#jenkinsfile][Jenkinsfile]]
      - [[#powershell][Powershell]]
      - [[#hcl][HCL]]
      - [[#terraform][Terraform]]
      - [[#dhall][Dhall]]
      - [[#docker][Docker]]
      - [[#go][Go]]
    - [[#misc-2][Misc]]
      - [[#comments][Comments]]
      - [[#rainbow-delimiters][Rainbow Delimiters]]
      - [[#indent-tools][indent-tools]]
  - [[#direnv][direnv]]
- [[#runtime][Runtime]]
  - [[#performance][Performance]]
    - [[#garbage-collection-magic-hack][Garbage Collection Magic Hack]]

* Intro

+ emacs part inspired by [[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch]].
  + usage outside of nixpkgs is not supported
+ nix part uses [[https://github.com/nix-community/emacs-overlay][emacs-overlay]] to offer
  + a nix package that also includes all emacs packages used by this configuration
  + uses emacs-overlay's =emacsWithPackagesFromUsePackage= to automatically
    generate the list of nix emacsPackages

** Quick Start

*** Clone the Repository

#+begin_src bash

# backup your current config
mv ~/.config/emacs ~/.config/emacs.bak
# clone the repo
git clone <repo-url> ~/.config/emacs
cd ~/.config/emacs

#+end_src

*** Install Dependencies (incomplete)

+ generally available packages like ~git~ are not included

#+begin_src bash

# show full list of dependencies
nix eval --json '.#dependencies.x86_64-linux' | jq -r 'to_entries[] | .key'

# install all dependencies
nix eval --json '.#dependencies.x86_64-linux' | jq -r 'to_entries[] | .key' \
    | xargs -i nix profile install 'nixpkgs#{}'

#+end_src

**** TODO complete list of dependencies                         :noexport:

*** Build, Run, Install

#+begin_src bash

# to build it
nix build '.#hoppla-emacs'
# or to directly run it
nix run '.#hoppla-emacs'
# or to install it
nix profile install '.#hoppla-emacs'

#+end_src
    
**** home-manager example

flake.nix

#+begin_src nix

{
  description = "Example";

  inputs = {
    nixpkgs = "github:NixOS/nixpkgs/nixos-23.05";
    nixpkgs-unstable = "github:NixOS/nixpkgs/nixos-unstable";

    hoppla-emacs = {
      url = "github:hoppla20/hoppla-emacs";
      inputs.nixpkgs.follow = "unstable";
    };
    emacs-libvterm = {
      url = "github:akermu/emacs-libvterm";
      flake = false;
    };
  };
}

#+end_src

home-manager-config.nix

#+begin_src nix

{
  pkgs,
  inputs,
  darkTheme ? true,
  ...
}: let
  catppuccinTheme =
    if darkTheme
    then "macchiato"
    else "latte";
in {
  programs.emacs = {
    enable = true;
    package = inputs.hoppla-emacs.packages.${pkgs.system}.hoppla-emacs;
  };

  services.emacs = {
    enable = true;
    client.enable = true;
    socketActivation.enable = true;
  };

  home.packages = builtins.attrValues inputs.hoppla-emacs.${pkgs.system}.dependencies;

  xdg.configFile."emacs/etc/user.el".text = ''
    (setq hoppla/catppuccin-flavor '${catppuccinTheme})
    (setq hoppla/extra-workspace-dirs '(("/etc/nixos" . 0)
                                        ("~/.config/emacs" . 0)))
  '';

  programs.bash.initExtra = l.readFile "${inputs.emacs-libvterm}/etc/emacs-vterm-bash.sh";
  programs.zsh.initExtra = l.readFile "${inputs.emacs-libvterm}/etc/emacs-vterm-zsh.sh";
}

#+end_src

***** TODO fully working example                               :noexport:

** Configuration

~hoppla-emacs~ exposes some variables that can be overwritten in order to change the appearance or behaviour.
The variables and their default values can be found in [[./etc/defaults.org]] and can be overwritten with a
[[./etc/user.el]] file.

* Known Issues

** Terminal Colors

If the the colors don't look right with ~emacs -nw~, use

#+begin_src bash

TERM=xterm-direct emacs -nw
# or when using alacritty
TERM=alacritty-direct emacs -nw

# also works with emacsclient
TERM=xterm-direct emacsclient -nw --create-window

#+end_src

* Basic Configuration

** Reload user config

#+begin_src elisp

(defun hoppla/reload-config (&optional cfg)
  (interactive)
  (let ((cfg (or cfg "all")))
    (cond ((string= cfg "user") (load-file hoppla/user-file))
          (t (load-file (expand-file-name "init.el" user-emacs-directory))))
    (hoppla/reload-theme)))
(defun hoppla/reload-user-config ()
  (interactive)
  (hoppla/reload-config "user"))

#+end_src

** Package Management

+ [[https://github.com/jwiegley/use-package][GitHub]]

#+begin_src elisp

;; for startup time debugging
;; (setq use-package-compute-statistics t)
(eval-when-compile (require 'use-package))

#+end_src

** Startup Performance

https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

#+begin_src elisp

(setq gc-cons-threshold (* 10 1024 1024))

(setq file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun hoppla/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'hoppla/display-startup-time)

#+end_src

** Keybindings

#+begin_src elisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** evil

+ GitHub
  + [[https://github.com/emacs-evil/evil][evil]]
  + [[https://github.com/emacs-evil/evil-collection][evil-collection]]

#+begin_src elisp

(use-package goto-chg)
(use-package evil
  :after goto-chg
  :init
  (setq evil-undo-system 'undo-redo
        evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-i-jump t
        evil-want-C-u-scroll t
        evil-overriding-maps nil)
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
(use-package evil-terminal-cursor-changer
  :unless (display-graphic-p)
  :config
  (evil-terminal-cursor-changer-activate))

#+end_src

*** which-key

+ [[https://github.com/justbur/emacs-which-key][GitHub]]

#+begin_src elisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :init
  (setq which-key-show-early-on-C-h t)
  (setq which-key-idle-delay 1.5)
  (setq which-key-idle-secondary-delay 0.05)
  :config
  (which-key-mode 1))

#+end_src

*** general

+ [[https://github.com/noctuid/general.el][GitHub]]

#+begin_src elisp

(defun hoppla/other-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(use-package general
  :after evil
  :config
  (general-evil-setup)
  (general-nmap "C-w Q" 'kill-buffer-and-window)

  (general-create-definer hoppla/leader-def
    :states '(normal insert emacs)
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/leader-prefix-map)

  (hoppla/leader-def "t" '(:ignore t :wk "toggles"))
  (hoppla/leader-def "b" '(:ignore t :wk "buffers"))
  (hoppla/leader-def "f" '(:ignore t :wk "files"))
  (hoppla/leader-def "g" '(:ignore t :wk "git"))
  (hoppla/leader-def "h" '(:ignore t :wk "help"))
  (hoppla/leader-def "p" '(:ignore t :wk "projects"))
  (hoppla/leader-def "P" '(:ignore t :wk "perspectives"))
  (hoppla/leader-def "d" '(:ignore t :wk "directories"))
  (hoppla/leader-def "s" '(:ignore t :wk "search"))
  (hoppla/leader-def "e" '(:ignore t :wk "environment"))

  (hoppla/leader-def "bi" '(ibuffer :wk "ibuffer"))
  (hoppla/leader-def "bk" '(kill-current-buffer :wk "kill current buffer"))
  (hoppla/leader-def "bo" '(hoppla/other-buffer :wk "switch to other buffer"))
  (hoppla/leader-def "fr" '(recentf :wk "find recent file"))
  (hoppla/leader-def "ff" '(find-file :wk "find file"))
  (hoppla/leader-def "fo" '(find-file-other-window :wk "find file other window")))

#+end_src

*** hydra

#+begin_src elisp

(use-package dash
  :config
  (global-dash-fontify-mode))
(use-package s)
(use-package hydra)
(use-package major-mode-hydra
  :demand t
  :after (hydra dash s)
  :general
  (hoppla/leader-def "m" '(major-mode-hydra :wk "major"))
  :config
  (major-mode-hydra-define emacs-lisp-mode
    (:title "elisp mode" :quit-key "q")
    ("Eval"
     (("b" eval-buffer "buffer")
      ("e" eval-defun "defun")
      ("r" eval-region "region"))
     "REPL"
     (("I" ielm "ielm"))
     "Test"
     (("t" ert "prompt")
      ("T" (ert t) "all")
      ("F" (ert :failed) "failed"))
     "Doc"
     (("d" describe-foo-at-point "thing-at-point")
      ("f" describe-function "function")
      ("v" describe-variable "variable")
      ("i" info-lookup-symbol "info lookup")))))

#+end_src

** Recent Files

#+begin_src elisp

(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

#+end_src

** Helpful

#+begin_src elisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :general
  ([remap describe-function] 'helpful-function)
  ([remap describe-variable] 'helpful-variable)
  ([remap describe-command] 'helpful-command)
  ([remap describe-key] 'helpful-key)
  (hoppla/leader-def "hf" '(describe-function :wk "describe function"))
  (hoppla/leader-def "hc" '(describe-command :wk "describe command"))
  (hoppla/leader-def "hv" '(describe-variable :wk "describe variable"))
  (hoppla/leader-def "hk" '(describe-key :wk "describe key")))

#+end_src

** Indents

#+begin_src elisp

;; buffer local
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

#+end_src

** Auto Revert (Reload Buffer on file change)

#+begin_src elisp

(auto-revert-mode 1)

#+end_src

** Always confirm with y/n

#+begin_src elisp

(defalias 'yes-or-no-p 'y-or-n-p)

#+end_src

** savehist-mode

#+begin_src elisp

(savehist-mode 1)

#+end_src

** Load env variables from shell

#+begin_src elisp

(use-package exec-path-from-shell
  :config
  ;; ssh-agent
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))

#+end_src

* System Configuration

#+begin_src elisp

(require 'subr-x)
(setq hoppla/is-termux
      (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))

#+end_src

* UI
** Basics

#+begin_src elisp

(unless hoppla/is-termux
  (tool-bar-mode -1)
  (set-fringe-mode 10))

(menu-bar-mode -1)
(setq visible-bell t)

#+end_src

*** Fonts

#+begin_src elisp

(add-to-list 'default-frame-alist `(font . ,hoppla/default-font))
(use-package nerd-icons)

#+end_src

*** Line / Column Numbers

#+begin_src elisp

(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Improved Scrolling

#+begin_src elisp

(setq mouse-whell-scroll-amount '(1 ((shift) . 1)))
(setq mouse-whell-progressive-speed nil)
(setq mouse-wheel-follow-mouse t)
(setq scroll-step 1)

#+end_src

*** Terminal No Background Color

#+begin_src elisp

(defun hoppla/terminal-no-bg-color ()
  (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))

(add-hook 'window-setup-hook 'hoppla/terminal-no-bg-color)

#+end_src

*** Syntax Highlighting

#+begin_src elisp

(setq font-lock-maximum-decoration t)

#+end_src

** Theme

+ [[https://github.com/catppuccin/emacs][GitHub]]

#+begin_src elisp

(use-package catppuccin-theme
  :init
  (setq catppuccin-flavor hoppla/catppuccin-flavor)
  :config
  (load-theme 'catppuccin :no-confirm)
  (defun hoppla/reload-theme ()
    (interactive)
    (setq catppuccin-flavor hoppla/catppuccin-flavor)
    (load-theme 'catppuccin :no-confirm)))

#+end_src

** Windows

*** transpose-frame

#+begin_src elisp

(use-package transpose-frame)

#+end_src

*** move-border

- [[https://github.com/ramnes/move-border][GitHub]]
  - not on elpa, melpa, ...

#+begin_src elisp

(defun hoppla/xor (b1 b2)
  (or (and b1 b2)
      (and (not b1) (not b2))))

(defun hoppla/move-border-left-or-right (arg dir)
  "General function covering move-border-left and move-border-right. If DIR is
     t, then move left, otherwise move right."
  (interactive)
  (if (null arg) (setq arg 1))
  (let ((left-edge (nth 0 (window-edges))))
    (if (hoppla/xor (= left-edge 0) dir)
        (shrink-window arg t)
      (enlarge-window arg t))))

(defun hoppla/move-border-up-or-down (arg dir)
  "General function covering move-border-up and move-border-down. If DIR is
     t, then move up, otherwise move down."
  (interactive)
  (if (null arg) (setq arg 1))
  (let ((top-edge (nth 1 (window-edges))))
    (if (hoppla/xor (= top-edge 0) dir)
        (shrink-window arg nil)
      (enlarge-window arg nil))))

(defun hoppla/move-border-left (arg)
  (interactive "P")
  (hoppla/move-border-left-or-right arg t))

(defun hoppla/move-border-right (arg)
  (interactive "P")
  (hoppla/move-border-left-or-right arg nil))

(defun hoppla/move-border-up (arg)
  (interactive "P")
  (hoppla/move-border-up-or-down arg t))

(defun hoppla/move-border-down (arg)
  (interactive "P")
  (hoppla/move-border-up-or-down arg nil))

#+end_src

**** TODO extract into own package                              :noexport:

*** zoom

+ [[https://github.com/cyrus-and/zoom][GitHub]]

#+begin_src elisp

(use-package zoom
  :demand
  :init
  (setq zoom-size '(0.618 . 0.618))
  :general
  (general-nmap :keymaps 'global "C-w z" 'zoom-mode)
  :config
  (zoom-mode 1))

#+end_src

*** ace-window

+ [[https://github.com/abo-abo/ace-window][GitHub]]

#+begin_src elisp

(use-package ace-window
  :after (evil zoom)
  :general
  (hoppla/leader-def "w" '(ace-window-hydra/body :wk "windows"))
  :init
  (defun hoppla/zoom-reset () (interactive) (text-scale-adjust 0) (message nil))
  :pretty-hydra
  ((:title "windows" :color amaranth :quit-key "q")
   ("Actions"
    (("x" delete-window "delete")
     ("X" ace-delete-window "delete (ace)")
     ("O" ace-delete-other-windows "delete other windows")
     ("S" ace-swap-window "swap")
     ("a" ace-window "ace window"))
    "Movement"
    (("h" evil-window-left "←")
     ("j" evil-window-down "↓")
     ("k" evil-window-up "↑")
     ("l" evil-window-right "→"))
    "Resize"
    (("H" hoppla/move-border-left "←")
     ("J" hoppla/move-border-down "↓")
     ("K" hoppla/move-border-up "↑")
     ("L" hoppla/move-border-right "→")
     ("=" evil-auto-balance-windows "balance")
     ("z" zoom "zoom")
     ("Z" zoom-mode "toggle zoom mode"))
    "Split"
    (("s" evil-window-split "horizontal")
     ("v" evil-window-vsplit "vertical"))
    "Text Scale"
    (("+" text-scale-increase "increase")
     ("-" text-scale-decrease "decrease")
     ("0" hoppla/zoom-reset "reset")))))

#+end_src

** Modeline

#+begin_src elisp

(line-number-mode 1)
(column-number-mode 1)

(use-package doom-modeline
  :after nerd-icons
  :config
  (setq doom-modeline-height 30)
  (setq doom-modeline-height 30)
  (setq doom-modeline-buffer-encoding nil)
  :init
  (doom-modeline-mode 1))

#+end_src

** Tabs (disabled)

+ default keybindings prefixed with ~C-c t~

#+begin_src elisp :tangle no

;; (use-package centaur-tabs
;;   :demand
;;   :hook ((vterm-mode . centaur-tabs-local-mode))
;;   :init
;;   (setq centaur-tabs-enable-key-bindings t)
;;   (setq centaur-tabs-style "bar")
;;   (setq centaur-tabs-set-bar 'nil)
;;   (setq centaur-tabs-set-icons t)
;;   (setq centaur-tabs-icon-type 'nerd-icons)
;;   (setq centaur-tabs-cycle-scope 'tabs)
;;   (defun centaur-tabs-buffer-groups ()
;;     "`centaur-tabs-buffer-groups' control buffers' group rules.
;; 
;; Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
;; All buffer name start with * will group to \"Emacs\".
;; Other buffer group by `centaur-tabs-get-group-name' with project name."
;;     (list
;;      (cond
;;       ((or (string-equal "*" (substring (buffer-name) 0 1))
;;            (memq major-mode '(magit-process-mode
;;                               magit-status-mode
;;                               magit-diff-mode
;;                               magit-log-mode
;;                               magit-file-mode
;;                               magit-blob-mode
;;                               magit-blame-mode
;;                               )))
;;        "Emacs")
;;       ((derived-mode-p 'prog-mode)
;;        "Editing")
;;       ((derived-mode-p 'dired-mode)
;;        "Dired")
;;       ((memq major-mode '(helpful-mode
;;                           help-mode))
;;        "Help")
;;       ((memq major-mode '(org-mode
;;                           org-agenda-clockreport-mode
;;                           org-src-mode
;;                           org-agenda-mode
;;                           org-beamer-mode
;;                           org-indent-mode
;;                           org-bullets-mode
;;                           org-cdlatex-mode
;;                           org-agenda-log-mode
;;                           diary-mode))
;;        "OrgMode")
;;       (t
;;        (centaur-tabs-get-group-name (current-buffer))))))
;;   :config
;;   (centaur-tabs-mode 1)
;;   (centaur-tabs-headline-match)
;;   :general
;;   (:states '(normal visual insert emacs)
;;            "M-," 'centaur-tabs-backward
;;            "M-." 'centaur-tabs-forward
;;            "M-<" 'centaur-tabs-move-current-tab-to-left
;;            "M->" 'centaur-tabs-move-current-tab-to-right)
;;   (general-nmap "g t" 'centaur-tabs-forward)
;;   (general-nmap "g T" 'centaur-tabs-backward)
;;   (hoppla/leader-def "T" '(centaur-tabs-hydra/body :wk "tabs"))
;;   :pretty-hydra
;;   ((:title "tabs" :color amaranth :quit-key "q")
;;    ("Groups"
;;     (("[" centaur-tabs-backward-group "previous group")
;;      ("]" centaur-tabs-forward-group "next group")
;;      ("g" centaur-tabs-switch-group "switch group" :color blue)))))

#+end_src

** Dashboard

#+begin_src elisp

(use-package dashboard
  :after (nerd-icons projectile)
  :init
  (setq dashboard-center-content t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons) 
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-projects-switch-function 'projectile-persp-switch-project)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
  :config
  (dashboard-setup-startup-hook)
  ;; display dashboard when starting emacsclient
  (general-nmap "gD" '(dashboard-open :wk "go to dashboard"))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))

#+end_src

** Search

#+begin_src elisp

(use-package anzu
  :general
  (:keymaps 'isearch-mode-map [remap isearc-query-replace] 'ansu-isearch-query-replace)
  (:keymaps 'isearch-mode-map [remap isearc-query-replace-regexp] 'ansu-isearch-query-replace-regexp)
  :config
  (global-anzu-mode 1))
(use-package evil-anzu
  :after (anzu evil))

#+end_src

* Indent Guides

#+begin_src elisp

(use-package highlight-indent-guides
  :custom
  (highlight-indent-guides-method 'fill "Change default method.")
  (highlight-indent-guides-auto-odd-face-perc 15 "Change default auto face luminocity percentage.")
  (highlight-indent-guides-auto-even-face-perc 25 "Change default auto face luminocity percentage.")
  :hook (prog-mode . highlight-indent-guides-mode))

#+end_src

* Plugins

** Editorconfig

#+begin_src elisp

(use-package editorconfig
  :config
  (editorconfig-mode 1))

#+end_src

** Org

+ [[https://orgmode.org/org.html][Manual]]
+ [[https://github.com/Somelauw/evil-org-mode][evil-org]]

Some useful evil-org keybindings

| Key   | Command              | Description                                                                 |
|-------+----------------------+-----------------------------------------------------------------------------|
| =RET= | evil-org-ret         | depending on context create new item/table element/row or insert a new line |
| =gh=  | org-element-up       | go to parent element                                                        |
| =gl=  | org-down-element     | go to sub element                                                           |
| =gj=  | org-forward-element  | go to next element (same level)                                             |
| =gk=  | org-backward-element | go to previous element (same level)                                         |

org-meta keys

| Key   | Command            | On Headings       | On tables         |
|-------+--------------------+-------------------+-------------------|
| =M-h= | org-metaleft       | promote heading   | move column left  |
| =M-l= | org-metaright      | demote heading    | move column right |
| =M-k= | org-metaup         | move subtree up   | move column up    |
| =M-j= | org-metadown       | move subtree down | move column down  |
| =M-H= | org-shiftmetaleft  | promote subtree   | delete column     |
| =M-L= | org-shiftmetaright | demote subtree    | insert column     |
| =M-K= | org-shiftmetaup    | move heading up   | delete row        |
| =M-J= | org-shiftmetadown  | move heading down | insert row        |

#+begin_src elisp

(use-package org-mode
  :ensure org
  :mode ("\\.org$" . org-mode)
  :init
  (setq org-startup-indented t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
  :mode-hydra
  ((:title "org" :color amaranth :quit-key "q")
   ("Movement"
    (("j" org-next-visible-heading "next heading")
     ("k" org-previous-visible-heading "previous heading")
     ("u" outline-up-heading "move up the heading tree")
     ("C-j" org-forward-heading-same-level "next heading (same level)")
     ("C-k" org-backward-heading-same-level "previous heading (same level)")))))
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (evil-org-set-key-theme '(textobjects
                            insert
                            navigation
                            return
                            additional
                            shift
                            todo
                            calendar)))
(use-package evil-org-agenda
  :ensure evil-org
  :after evil-org)
(use-package org-tempo
  :ensure org
  :after org
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src elisp")))
(use-package toc-org
  :hook ((org-mode . toc-org-mode)
         (markdown-mode . toc-org-mode))
  :general
  (:states 'normal :keymaps 'markdown-mode-map "C-c C-o" 'toc-org-markdown-follow-thing-at-point))

#+end_src

**** TODO extend org-hydra further or just use evil-org?

*** Appearance

**** Center Buffer

#+begin_src elisp

(defun hoppla/org-mode-visual-fill ()
  (setq visual-fill-column-width 120)
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
(use-package visual-fill-column
  :after org
  :hook (org-mode . hoppla/org-mode-visual-fill))

#+end_src

**** Auto-tangle

#+begin_src elisp

(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

**** Misc

#+begin_src elisp

(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode))

#+end_src

** Essentials

*** dired

#+begin_src elisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :init
  (setq dired-listing-switches "-lah --group-directories-first")
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
  :general
  (hoppla/leader-def "dj" 'dired-jump))
(use-package dired-single
  :commands (dired dired-jump))
(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))
(use-package dired-open
  :commands (dired dired-jump)
  :init
  (setq dired-open-extensions '(("pdf" . "evince"))))
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

*** ranger (disabled)

+ useful keybindings
  + ~zP~ toggle deer/ranger mode
  + ~zp~ toggle file details in deer mode
  + ~zh~ show hidden files
  + ~z-~, ~z+~ show less/more parent folders
  + ~i~ toggle file preview window

#+begin_src elisp :tangle no

;; (use-package ranger
;;   :init
;;   (setq ranger-cleanup-eagerly t)
;;   :config
;;   (ranger-override-dired-mode 1))

#+end_src

*** magit

+ [[https://magit.vc/manual/magit/][Manual]]

#+begin_src elisp

(use-package magit
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  :general
  (hoppla/leader-def "gg" 'magit))

#+end_src

*** projectile

#+begin_src elisp

(use-package projectile
  :after rg
  :diminish projectile-mode
  :init
  (setq projectile-switch-project-action 'projectile-find-file)
  (when (file-directory-p hoppla/workspace-dir)
    (setq projectile-project-search-path (append `((,hoppla/workspace-dir . 4)) hoppla/extra-workspace-dirs)))
  :hook (after-init . (lambda () (projectile-mode 1)))
  :general
  (:states '(normal insert emacs)
           :keymaps 'projectile-mode-map
           :prefix hoppla/leader
           :global-prefix hoppla/global-leader
           :prefix-map 'hoppla/projectile-leader-prefix-map
           "pp" '(projectile-switch-project :wk "switch project")
           "po" '(projectile-switch-open-project :wk "switch open projects")
           "pa" '(projectile-add-project :wk "add project")
           "pd" '(projectile-discover-projects-in-search-path :wk "discover projects")
           "pr" '(projectile-recentf :wk "recent project files")))

#+end_src

*** perspective

#+begin_src elisp

(use-package perspective
  :demand t
  :hook (kill-emacs . persp-state-save)
  :init
  (unless (file-exists-p hoppla/persp-states-dir)
    (make-directory hoppla/persp-states-dir))
  (setq persp-state-default-file (expand-file-name "default.el" hoppla/persp-states-dir))
  (setq persp-suppress-no-prefix-key-warning t)
  :config
  (persp-mode 1)
  (general-def :states '(normal insert emacs)
    :keymaps 'persp-mode-map
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/persp-leader-prefix-map
    "bi" '(persp-ibuffer :wk "ibuffer")
    "bI" '(ibuffer :wk "ibuffer")
    "br" '(persp-remove-buffer :wk "remove buffer")
    "bA" '(persp-add-buffer :wk "add buffer to global perspective")
    "bG" '(persp-add-buffer-to-frame-global :wk "add buffer to global perspective")

    "Ps" '(persp-switch :wk "switch perspective")
    "Po" '(persp-switch-last :wk "switch to last perspective")
    "Pi" '(persp-import :wk "import perspective from another frame")
    "Pr" '(persp-rename :wk "rename perspective")
    "Pk" '(persp-kill :wk "kill perspective")
    "P[" '(persp-prev :wk "previous perspective")
    "P]" '(persp-next :wk "next perspective")
    "Pm" '(persp-merge :wk "merge perspective")
    "Pu" '(persp-unmerge :wk "unmerge perspective")
    "PS" '(persp-state-save :wk "save all perspectives")
    "PL" '(persp-state-load :wk "load perspectives")))
(use-package persp-projectile
  :after (perspective projectile)
  :config
  (general-def :states '(normal insert emacs)
    :keymaps 'persp-mode-map
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/persp-leader-prefix-map
    "Pp" '(projectile-persp-switch-project :wk "switch project (clean perspective)")))

#+end_src

*** terminal

**** vterm

#+begin_src elisp

(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
(use-package multi-vterm
  :general
  (hoppla/leader-def "tt" '(multi-vterm-dedicated-toggle :wk "toggle terminal"))
  (hoppla/leader-def "pt" '(multi-vterm-project :wk "toggle terminal"))
  :init
  (setq multi-vterm-dedicated-window-height-percent 30)
  :config
  (major-mode-hydra-define vterm-mode
    (:title "vterm mode" :quit-key "q")
    ("Switch"
     (("+" multi-vterm "create new")
      ("r" multi-vterm-rename-buffer "rename buffer")
      ("p" multi-vterm-prev "previous" :color amaranth)
      ("n" multi-vterm-next "next" :color amaranth)))))

#+end_src

*** movement

**** avy

#+begin_src elisp

(use-package avy
  :init
  (setq avy-timeout-seconds 0.8)
  (setq avy-all-windows nil)
  :general
  (:states '(normal visual) :keymaps 'global "C-:" 'avy-goto-char)
  (:states '(normal visual) :keymaps 'global "C-'" 'avy-goto-char-2)
  (general-nmap "gl" 'avy-goto-line)
  (general-nmap "gw" 'avy-goto-word-1)
  (hoppla/leader-def "sa" '(avy-goto-char-timer :wk "avy timer"))
  (hoppla/leader-def "sr" '(avy-resume :wk "avy resume")))

#+end_src

*** Snippets

**** yasnippet

#+begin_src elisp

(use-package yasnippet
  :hook (prog-mode . yas-minor-mode))
(use-package yasnippet-snippets
  :after yasnippet)

#+end_src

*** relative-buffer-names (disabled)

#+begin_src elisp :tangle no

(use-package buffer-name-relative
  :init
  (setq buffer-name-relative-prefix '("<" . ">/"))
  (setq buffer-name-relative-prefix-map
        '(("~/Workspace" . "WORKSPACE")))
  (setq buffer-name-relative-root-functions
        '(buffer-name-relative-root-path-from-projectile
          buffer-name-relative-root-path-from-vc))
  (setq buffer-name-relative-abbrev-limit 16)
  :config
  (buffer-name-relative-mode))

#+end_src

*** aggressive-indent

#+begin_src elisp

(use-package aggressive-indent)

#+end_src

** Completion & Search

*** native

#+begin_src elisp

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; Emacs 28: Hide commands in M-x which do not work in the current mode.
;; Vertico commands are hidden in normal buffers.
;; (setq read-extended-command-predicate
;;       #'command-completion-default-include-p)

;; Enable recursive minibuffers
(setq enable-recursive-minibuffers t)

;; TAB cycle
(setq completion-cycle-threshold t)

;; Enable indentation+completion using TAB
(setq tab-always-indent 'complete)

;; Hide commands which do not work in current mode
(setq read-extended-command-predicate 'command-completion-default-include-p)

#+end_src

*** icons

#+begin_src elisp

(use-package nerd-icons-completion
  :demand t
  :after marginalia
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :config
  (nerd-icons-completion-mode))

#+end_src

*** orderless

+ prefix filtering for inputs shorter than four characters

#+begin_src elisp

(use-package orderless
  :config
  (defun orderless-fast-dispatch (word index total)
    (and (= index 0) (= total 1) (length< word 4)
         `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

  (orderless-define-completion-style orderless-fast
    (orderless-style-dispatchers '(orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp)))

  (setq completion-styles '(substring orderless-fast basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

*** mct (disabled)

+ Toggle Completions using ~C-l~
+ [[https://elpa.gnu.org/packages/mct.html#h:bb445062-2e39-4082-a868-2123bfb793cc][Selecting candidates]]
  + cycle using ~TAB~
  + complete and exit using ~RET~
  + edit completion ~M-e~
  + choose completion number ~M-g M-g~
  + when choosing multiple allowed (~[CRM]~)
    + pick candidate ~M-RET~
    + pick candidate and exit ~RET~

#+begin_src elisp :tangle no

;; (use-package mct
;;   :init
;;   (setq mct-persist-dynamic-completion t)
;;   (setq mct-completion-window-size (cons #'mct--frame-height-fraction 1))
;;   :config
;;   (mct-minibuffer-mode 1))

#+end_src

*** vertico

Display mode shortcuts (multiform extension):

| Key | Display Mode |
|-----+--------------|
| M-V | vertical     |
| M-G | grid         |
| M-F | flat         |
| M-R | reverse      |
| M-U | unobtrusive  |


#+begin_src elisp

(use-package vertico
  :init
  (vertico-mode 1)
  (setq vertico-cycle t)
  (setq vertico-resize t)
  :config
  (defun vertico-bottom--display-candidates (lines)
    "Display LINES in bottom."
    (move-overlay vertico--candidates-ov (point-min) (point-min))
    (unless (eq vertico-resize t)
      (setq lines (nconc (make-list (max 0 (- vertico-count (length lines))) "\n") lines)))
    (let ((string (apply #'concat lines)))
      (add-face-text-property 0 (length string) 'default 'append string)
      (overlay-put vertico--candidates-ov 'before-string string)
      (overlay-put vertico--candidates-ov 'after-string nil))
    (vertico--resize-window (length lines)))
  (advice-add #'vertico--display-candidates :override #'vertico-bottom--display-candidates))
(use-package vertico-directory
  :ensure vertico
  :after vertico
  :config
  :general
  (:keymaps 'vertico-map
            "RET" 'vertico-directory-enter
            "DEL" 'vertico-directory-delete-char
            "M-DEL" 'vertico-directory-delete-word)
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
(use-package vertico-mouse
  :ensure vertico
  :after vertico
  :config
  (vertico-mouse-mode 1))
(use-package vertico-multiform
  :ensure vertico
  :after vertico
  :config
  (vertico-multiform-mode 1)
  (setq vertico-multiform-commands
        '((execute-extended-command grid
           (vertico-flat-annotate . 1)
           (vertico-grid-annotate . 1)
           (marginalia-annotator-registry (command marginalia-annotate-binding))))))
(use-package vertico-unobtrusive
  :ensure vertico
  :after vertico)
(use-package vertico-quick
  :ensure vertico
  :after vertico
  :general
  (:keymaps 'vertico-map
            "M-q" 'vertico-quick-insert
            "C-q" 'vertico-quick-exit))
(use-package vertico-repeat
  :ensure vertico
  :after vertico
  :general
  (:keymaps 'global "M-R" 'vertico-repeat)
  :hook (minibuffer-setup . vertico-repeat-save))

#+end_src

*** marginalia, consult

#+begin_src elisp
(use-package marginalia
  :after vertico
  :general
  (:keymaps 'minibuffer-local-map "M-A" 'marginalia-cycle)
  :init
  (marginalia-mode))
(use-package consult
  :general
  (:states '(normal visual insert emacs)
           "C-/" 'consult-line)
  (hoppla/leader-def
    "M-x" '(consult-mode-command :wk "consult")
    "bs" '(consult-buffer :wk "switch buffer")
    "bO" '(consult-buffer-other-window :wk "open buffer in other window")
    "fr" '(consult-recent-file :wk "find recent file")
    "fc" '(consult-find :wk "find file")
    "fd" '(consult-fd :wk "find directory")
    "sr" '(consult-ripgrep :wk "ripgrep"))
  (general-nmap "C-p" '(consult-find :wk "find file"))
  :init
  (setq xref-show-xrefs-function 'consult-xref)
  (setq xref-show-definitions-function 'consult-xref)
  (setq consult-narrow-key "<")
  :config
  ;; projectile
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;; perspective (switch with prefix b)
  (consult-customize consult--source-buffer :hidden t :default nil)
  (add-to-list 'consult-buffer-sources persp-consult-source)
  ;; live ui
  (consult-customize consult-theme :preview-key
                     '("M-."
                       :debounce 0.5 "<up>" "<down>"
                       :debounce 1 any)))
(use-package consult-dir
  :general
  ("C-x C-d" 'consult-dir)
  (hoppla/leader-def "dd" '(consult-dir :wk "dired"))
  (:keymaps 'minibuffer-local-completion-map
            "C-x C-d" 'consult-dir
            "C-x C-j" 'consult-dir-jump-file)
  :init
  (setq consult-dir-default-command 'consult-dir-dired))

#+end_src

*** embark

#+begin_src elisp

(use-package embark
  :general
  (:keymaps 'global
            "C-." 'embark-act
            "C-;" 'embark-dwim
            "C-h B" 'embark-bindings)
  (hoppla/leader-def "hB" '(embark-bindings "embark bindings"))
  :config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  ;; which-key integration
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))

  (defun embark-live-vertico ()
    "Shrink Vertico minibuffer when `embark-live' is active."
    (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                        (active-minibuffer-window)))
      (with-selected-window win
        (when (and (bound-and-true-p vertico--input)
                   (fboundp 'vertico-multiform-unobtrusive))
          (vertico-multiform-unobtrusive)))))
  (add-hook 'embark-collect-mode-hook 'embark-live-vertico)
(use-package embark-consult
  :after (embark consult)
  :hook (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

*** cape

#+begin_src elisp

(use-package cape
  :init
  (add-to-list 'completion-at-point-functions 'cape-dabbrev)
  (add-to-list 'completion-at-point-functions 'cape-file)
  (add-to-list 'completion-at-point-functions 'cape-elisp-block)
  (add-to-list 'completion-at-point-functions 'cape-dict))

#+end_src

*** corfu

#+begin_src elisp

(use-package corfu
  :init
  (setq corfu-cycle t)
  (setq corfu-auto t) ;; auto completion
  (setq corfu-auto-delay 0.2)
  (setq corfu-auto-prefix 1)
  (setq corfu-quit-at-boundary 'separator)
  (setq corfu-preselect 'prompt)

  (defun corfu-enable-except ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
	              (bound-and-true-p vertico--input)
	              (eq (current-local-map) read-passwd-map))
      (setq-local corfu-echo-delay nil)
      (corfu-mode 1)))
  :hook ((prog-mode . corfu-mode)
         (text-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode)
         (minibuffer-setup . corfu-enable-except))
  :general
  (:keymaps 'corfu-map
            "M-SPC" 'corfu-insert-separator
            "RET" 'nil
            "S-TAB" 'corfu-previous
            "<backtab>" 'corfu-previous
            "TAB" 'corfu-next
            "<tab>" 'corfu-next
            "C-<return>" 'corfu-insert))
(use-package corfu-history
  :ensure corfu
  :after corfu
  :config
  (corfu-history-mode 1)
  (add-to-list 'savehist-additional-variables 'corfu-history))
(use-package corfu-popupinfo
  :demand t
  :ensure corfu
  :after corfu
  :config
  (corfu-popupinfo-mode 1)
  :general
  (:keymaps 'corfu-popupinfo-map
            "M-t" 'corfu-popupinfo-toggle))
(use-package corfu-quick
  :ensure corfu
  :after corfu
  :general
  (:keymaps 'corfu-map
            "M-q" 'corfu-quick-complete
            "C-q" 'corfu-quick-insert))
(use-package corfu-terminal
  :after corfu
  :init
  (unless (display-graphic-p)
    (corfu-terminal-mode 1)))
(use-package kind-icon
  :after (corfu nerd-icons)
  :init
  (setq kind-icon-default-face 'corfu-default)
  (setq kind-icon-use-icons nil)
  (setq kind-icon-mapping
        `(
          (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
          (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
          (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
          (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
          (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
          (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
          (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
          (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
          (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
          (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
          (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
          (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
          (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
          (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
          (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
          (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
          (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
          (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
          (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
          (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
          (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
          (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
          (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
          (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
          (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
          (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
          (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
          (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
          (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
          (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
          (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
          (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
          (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
          (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
          (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
          (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face)))
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))


#+end_src

*** ripgrep

#+begin_src elisp

(use-package rg
  :config
  (hoppla/leader-def "sR" '(rg-menu :wk "ripgrep")))

#+end_src

** Misc

*** pdf-tools

#+begin_src elisp

(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
  ;; (general-nmap :keymaps 'pdf-view-mode-map
  ;;   "h" 'pdf-view-previous-page-command
  ;;   "l" 'pdf-view-next-page-command
  ;;   "k" (lambda () (interactive) (pdf-view-previous-line-or-previous-page 5))
  ;;   "j" (lambda () (interactive) (pdf-view-next-line-or-next-page 5))
  ;;   "C-o" 'pdf-history-backward
  ;;   "C-i" 'pdf-history-forward
  ;;   "m" 'pdf-view-position-to-register
  ;;   "'" 'pdf-view-jump-to-register
  ;;   "/" 'pdf-occur
  ;;   "o" 'pdf-outline
  ;;   "f" 'pdf-links-action-perform
  ;;   "b" 'pdf-view-midnight-minor-mode))

#+end_src

*** no-littering

#+begin_src elisp

;; no-littering is required in init.el
(no-littering-theme-backups)

#+end_src

*** org-reveal (presentations)

+ [[https://github.com/yjwen/org-reveal/][org-reveal]]

#+begin_src elisp

(use-package htmlize)
(use-package ox-reveal
  :after (org htmlize)
  :config
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

#+end_src

** Development

*** Flycheck

#+begin_src elisp

(use-package flycheck
  :init
  (global-flycheck-mode))

#+end_src

*** Treesitter

#+begin_src elisp

(use-package treesit-auto
  :demand t
  :init
  (defun hoppla/ts-call-hooks ()
    (let* ((non-ts-mode (string-remove-suffix "-ts-mode" (symbol-name major-mode)))
          (non-ts-mode-hook (intern (concat non-ts-mode "-mode-hook"))))
      (run-hooks non-ts-mode-hook)))
  :hook ((python-ts-mode yaml-ts-mode c-ts-mode c++-ts-mode) . hoppla/ts-call-hooks)
  :config
  (global-treesit-auto-mode 1))

#+end_src

*** LSP

#+begin_src elisp

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :after orderless
  :hook ((lsp-mode . hoppla/lsp-mode-setup)
         (lsp-completion-mode . hoppla/lsp-mode-setup-completion))
  :init
  (setq read-process-output-max (* 1 1024 1024))
  (setq lsp-keymap-prefix "C-l")
  (setq lsp-completion-provider :none) ;; corfu
  (setq lsp-file-watch-threshold 2000)

  (defun hoppla/lsp-mode-setup ()
    (lsp-enable-which-key-integration))
  (defun hoppla/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless-fast))))

#+end_src

**** lsp-ui

#+begin_src elisp

(use-package lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :init
  (setq lsp-ui-doc-position 'top))

#+end_src

*** Languages

**** C / C++

#+begin_src elisp

(use-package ccls
  :defer t
  :hook ((c-mode c++-mode objc-mode cuda-mode c-ts-mode)
         . (lambda () (require 'ccls) (lsp-deferred))))

#+end_src

**** Python

#+begin_src elisp

(use-package python-mode
  :hook (python-mode . lsp-deferred))
(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))
(use-package py-autopep8
  :hook (python-mode . py-autopep8-mode))
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred))))

#+end_src

**** Nix

#+begin_src elisp

(use-package nix-mode
  :mode ("\\.nix\\'" "\\.nix.in\\'")
  :hook (nix-mode . lsp-deferred))
(use-package nix-drv-mode
  :ensure nix-mode
  :mode "\\.drv\\'")
(use-package nix-shell
  :ensure nix-mode
  :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
(use-package nix-repl
  :ensure nix-mode
  :commands (nix-repl))
(use-package lsp-nix
  :ensure lsp-mode
  :after lsp-mode
  :demand t
  :init
  (setq lsp-nix-nil-formatter ["alejandra"])
  (setq lsp-nix-nil-ignored-diagnostics ["unused_binding"]))

#+end_src

**** Yaml

#+begin_src elisp

(use-package yaml)
(use-package yaml-mode
  :after yaml
  :mode ("\\.yml\\'" "\\.yaml\\'")
  :hook ((yaml-mode . highlight-indent-guides-mode)
         (yaml-mode . lsp-deferred)))

#+end_src

**** Ansible

#+begin_src elisp

(setq hoppla/ansible-filename-re
      ".*\\(main\.\\(yml\\|yaml\\)\\|site\.\\(yml\\|yaml\\)\\|encrypted\.\\(yml\\|yaml\\)\\|roles/.+\.\\(yml\\|yaml\\)\\|group_vars/.+\\|host_vars/.+\\)")
(defun hoppla/ansible-should-enable? ()
  (and (stringp buffer-file-name)
       (string-match hoppla/ansible-filename-re buffer-file-name)))

(use-package ansible
  :commands (ansible-auto-decrypt-encrypt)
  :init
  (defun hoppla/ansible-maybe-enable ()
    (when (hoppla/ansible-should-enable?)
      (ansible 1)))
  :hook (yaml-mode . hoppla/ansible-maybe-enable))
(use-package ansible-doc
  :after ansible
  :init
  (defun hoppla/ansible-doc-maybe-enable ()
    (when (hoppla/ansible-should-enable?)
      (ansible-doc-mode 1)))
  :hook (yaml-mode . hoppla/ansible-doc-maybe-enable))
(use-package jinja2-mode
  :mode "\\.j2$"
  :config
  (setq jinja2-enable-indent-on-save nil))

#+end_src

**** Markdown

#+begin_src elisp

(use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode)
         ("README\\.md\\'" . gfm-mode))
  :init
  (setq markdown-command "multimarkdown"))
(use-package evil-markdown
  :after (evil markdown-mode)
  :hook (markdown-mode . evil-markdown-mode)
  :config
  (evil-markdown-set-key-theme '(textobjects
                                 navigation
                                 insert
                                 additional)))

#+end_src

**** Jenkinsfile

#+begin_src elisp

(use-package groovy-mode)
(use-package jenkinsfile-mode)

#+end_src

**** Powershell

#+begin_src elisp

(use-package powershell)

#+end_src

**** HCL

#+begin_src elisp

(use-package hcl-mode
  :init
  (setq hcl-indent-level 2))

#+end_src

**** Terraform

#+begin_src elisp

(use-package terraform-mode
  :hook (terraform-mode . outline-minor-mode)
  :init
  (setq terraform-indent-level 2)
  (setq terraform-format-on-save t))

#+end_src

**** Dhall

#+begin_src elisp

(use-package dhall-mode
  :mode "\\.dhall\\'")

#+end_src

**** Docker

#+begin_src elisp

(use-package dockerfile-mode
  :init
  (setq dockerfile-mode-command "podman")
  :config
  (put 'dockerfile-image-name 'safe-local-variable #'stringp))

#+end_src

**** Go

#+begin_src elisp

(use-package go-mode
  :hook (go-mode . lsp-deferred))

#+end_src

*** Misc

**** Comments

+ [[https://github.com/redguardtoo/evil-nerd-commenter][GitHub]]

#+begin_src elisp

(use-package evil-nerd-commenter
  :after evil
  :config
  (evilnc-default-hotkeys))

#+end_src

**** Rainbow Delimiters

#+begin_src elisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

**** indent-tools

#+begin_src elisp

(use-package indent-tools
  :general
  (general-nmap "C-c >" 'indent-tools-hydra/body))

#+end_src

** direnv

#+begin_src elisp

(use-package envrc
  :demand t
  :config
  (envrc-global-mode 1)
  :general
  (hoppla/leader-def :keymaps 'envrc-mode-map
    "ea" '(envrc-allow :wk "direnv allow")
    "ed" '(envrc-deny :wk "direnv deny")
    "er" '(envrc-reload :wk "direnv reload")
    "eR" '(envrc-reload-all :wk "direnv reset all")))

#+end_src

* Runtime

** Performance

#+begin_src elisp

(run-with-idle-timer
 5 nil
 (lambda ()
   (setq file-name-handler-alist file-name-handler-alist-original)
   (makunbound 'file-name-handler-alist-original)
   (message "file-name-handler-alist restored")))

#+end_src

*** Garbage Collection Magic Hack

#+begin_src elisp

(use-package gcmh
  :demand t
  :config
  (gcmh-mode 1))

#+end_src
