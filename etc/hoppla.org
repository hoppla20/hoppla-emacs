#+STARTUP: show4levels

* Intro

Inspired by [[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch]].

* Basic Configuration

** Disable Customize

Shamelessly copied from [[https://github.com/doomemacs/doomemacs/blob/35865ef5e89442e3809b8095199977053dd4210f/core/core-ui.el#L631C1-L639C103][Doom Emacs]]

#+begin_src elisp :tangle yes :results silent

;; still set a custom-file path so that the init.el will not be modified if custom is
;; invoked
(setq custom-file (no-littering-expand-etc-file-name "custom.el"))
(dolist (sym '(customize-option customize-browse customize-group customize-face
                                customize-rogue customize-saved customize-apropos
                                customize-changed customize-unsaved customize-variable
                                customize-set-value customize-customized customize-set-variable
                                customize-apropos-faces customize-save-variable
                                customize-apropos-groups customize-apropos-options
                                customize-changed-options customize-save-customized))
  (put sym 'disabled "Hoppla-emacs doesn't support `customize', configure Emacs from $EMACSCONFDIR/default.org instead"))
(put 'customize-themes 'disabled "Use `load-theme' in $EMACSCONFDIR/default.org instead")

#+end_src

** Package Management

- [[https://github.com/jwiegley/use-package][GitHub]]

#+begin_src elisp :tangle yes :results silent

(require 'package)
(unless hoppla/nix-managed-plugins
  (setq package-archives '(("melpa"       . "https://melpa.org/packages/")
                           ("melpaStable" . "https://stable.melpa.org/packages/")
                           ("nongnu"      . "https://elpa.nongnu.org/nongnu/")
                           ("elpa"        . "https://elpa.gnu.org/packages/")
                           ("elpaDevel"   . "https://elpa.gnu.org/devel/"))))
(package-initialize)
(unless (or hoppla/nix-managed-plugins package-archive-contents)
  (package-refresh-contents))

(setq use-package-always-ensure t)
(unless (or hoppla/nix-managed-plugins (package-installed-p 'use-package))
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

#+end_src

** Startup Performance

https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

#+begin_src elisp :tangle yes :results silent

(setq gc-cons-threshold (* 100 1024 1024))

(setq file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun hoppla/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'hoppla/display-startup-time)

#+end_src

** Keybindings

#+begin_src elisp :tangle yes :results silent

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** evil

- GitHub
  - [[https://github.com/emacs-evil/evil][evil]]
  - [[https://github.com/emacs-evil/evil-collection][evil-collection]]

#+begin_src elisp :tangle yes :results silent

(use-package goto-chg)
(use-package evil
  :after goto-chg
  :init
  (setq evil-undo-system 'undo-redo
        evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-i-jump t
        evil-want-C-u-scroll t
        evil-overriding-maps nil)
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

*** which-key

- [[https://github.com/justbur/emacs-which-key][GitHub]]

#+begin_src elisp :tangle yes :results silent

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :init
  (setq which-key-show-early-on-C-h t)
  (setq which-key-idle-delay 1.5)
  (setq which-key-idle-secondary-delay 0.05)
  :config
  (which-key-mode))

#+end_src

*** general

- [[https://github.com/noctuid/general.el][GitHub]]

#+begin_src elisp :tangle yes :results silent

(defun hoppla/other-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(use-package general
  :after evil
  :config
  (general-create-definer hoppla/leader-def
    :states '(normal insert emacs)
    :prefix hoppla/leader
    :global-prefix hoppla/global-leader
    :prefix-map 'hoppla/leader-prefix-map)
  (hoppla/leader-def "t" '(:ignore t :wk "toggles"))
  (hoppla/leader-def "b" '(:ignore t :wk "buffers"))
  (hoppla/leader-def "w" '(:ignore t :wk "windows"))
  (hoppla/leader-def "f" '(:ignore t :wk "files"))
  (hoppla/leader-def "g" '(:ignore t :wk "git"))
  (hoppla/leader-def "h" '(:ignore t :wk "help"))
  (hoppla/leader-def "d" '(:ignore t :wk "desktops"))
  (hoppla/leader-def "p" '(:ignore t :wk "projects"))
  (hoppla/leader-def "P" '(:ignore t :wk "perspectives"))

  (hoppla/leader-def "bo" '(hoppla/other-buffer :wk "switch to other buffer"))
  (hoppla/leader-def "bi" '(ibuffer :wk "ibuffer")))

#+end_src

*** hydra

#+begin_src elisp :tangle yes :results silent

(use-package hydra
  :config
  (defhydra hydra-zoom (global-map "<f2>")
	    zoom
	    ("[" text-scale-increase "in")
	    ("]" text-scale-decrese "out")))

#+end_src

** Recent Files

#+begin_src elisp :tangle yes :results silent

(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

#+end_src

** Helpful

#+begin_src elisp :tangle yes :results silent

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :init
  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key)
  :general
  (hoppla/leader-def "hf" '(describe-function :wk "describe function"))
  (hoppla/leader-def "hc" '(describe-command :wk "describe command"))
  (hoppla/leader-def "hv" '(describe-variable :wk "describe variable"))
  (hoppla/leader-def "hk" '(describe-key :wk "describe key")))

#+end_src

* UI
** Basics

#+begin_src elisp :tangle yes :results silent

(when (window-system)
  (tool-bar-mode -1))

(set-fringe-mode 5)

#+end_src

** Fonts

#+begin_src elisp :tangle yes :results silent

(add-to-list 'default-frame-alist `(font . ,hoppla/default-font))
(use-package nerd-icons)

#+end_src

** Line / Column Numbers

#+begin_src elisp :tangle yes :results silent

(display-line-numbers-mode 1)
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Modeline

#+begin_src elisp :tangle yes :results silent

(line-number-mode 1)
(column-number-mode 1)

(use-package doom-modeline
  :after nerd-icons
  :config
  (setq doom-modeline-height 15)
  :init
  (doom-modeline-mode 1))

#+end_src

** Theme

- [[https://github.com/catppuccin/emacs][GitHub]]

#+begin_src elisp :tangle yes :results silent

(use-package catppuccin-theme
  :init
  (setq catppuccin-flavor hoppla/catppuccin-flavor)
  :config
  (load-theme 'catppuccin :no-confirm)
  (hoppla/leader-def "tt" '(counsel-load-theme :wk "choose theme")))

#+end_src

** Dashboard

#+begin_src elisp :tangle yes :results silent

(use-package dashboard
  :after (projectile nerd-icons)
  :init
  (setq dashboard-center-content t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons) 
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project)
  :config
  (dashboard-setup-startup-hook)
  ;; display dashboard when staarting emacsclient
  (setq initial-buffer-choice (lambda () (switch-to-buffer "*dashboard*"))))

#+end_src

* Plugins

** Org

- [[https://orgmode.org/org.html][Manual]]

#+begin_src elisp :tangle yes :results silent

(use-package org
  :mode ("\\.org$" . org-mode)
  :init
  (setq org-startup-indented t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-structure-template-alist '("ets" . "src elisp :tangle yes :results silent")))

#+end_src

*** Appearance

**** Center Buffer

#+begin_src elisp :tangle yes :results silent

  (defun hoppla/org-mode-visual-fill ()
    (setq visual-fill-column-width 120)
    (setq visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  (use-package visual-fill-column
    :after org
    :hook (org-mode . hoppla/org-mode-visual-fill))

#+end_src

**** Auto-tangle

#+begin_src elisp :tangle yes :results silent

  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

**** Misc

#+begin_src elisp :tangle yes :results silent

  (use-package org-sticky-header
    :after org
    :hook (org-mode . org-sticky-header-mode))
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))

#+end_src

** Essentials

*** magit

- [[https://magit.vc/manual/magit/][Manual]]

#+begin_src elisp :tangle yes :results silent

  (use-package magit
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    :general
    (hoppla/leader-def "gg" 'magit))

#+end_src

*** projectile

#+begin_src elisp :tangle yes :results silent

  (use-package projectile
    :diminish projectile-mode
    :init
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action #'projectile-dired)
    (when (file-directory-p hoppla/workspace-dir)
      (setq projectile-project-search-path (append `((,hoppla/workspace-dir . 2)) hoppla/extra-workspace-dirs)))
    :config
    (projectile-mode 1)
    (general-def :states '(normal insert emacs)
      :keymaps 'projectile-mode-map
      :prefix hoppla/leader
      :global-prefix hoppla/global-leader
      :prefix-map 'hoppla/projectile-leader-prefix-map
      "ff" '(projectile-find-file :wk "search for project file")
      "fd" '(projectile-find-dir :wk "search for project directory")
      "fr" '(projectile-recentf :wk "find recent project file")
      "pp" '(projectile-switch-project :wk "switch project")
      "po" '(projectile-switch-open-project :wk "switch open projects")
      "pa" '(projectile-add-project :wk "add project")
      "pd" '(projectile-discover-projects-in-search-path :wk "discover projects")))
  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode 1))

      #+end_src

*** perspective

#+begin_src elisp :tangle yes :results silent

  (use-package perspective
    :defer nil
    :hook (kill-emacs . persp-state-save)
    :after counsel
    :init
    (unless (file-exists-p hoppla/persp-states-dir)
      (make-directory hoppla/persp-states-dir))
    (setq persp-state-default-file (expand-file-name "default.el" hoppla/persp-states-dir))
    (setq persp-suppress-no-prefix-key-warning t)
    :config
    (persp-mode 1)
    (general-def :states '(normal insert emacs)
      :keymaps 'persp-mode-map
      :prefix hoppla/leader
      :global-prefix hoppla/global-leader
      :prefix-map 'hoppla/persp-leader-prefix-map
      (hoppla/leader-def "bi" '(persp-ibuffer :wk "ibuffer"))
      (hoppla/leader-def "bI" '(ibuffer :wk "ibuffer"))
      (hoppla/leader-def "bs" '(persp-counsel-switch-buffer :wk "switch buffer (all perspectives)"))
      (hoppla/leader-def "bS" '(counsel-switch-buffer :wk "switch buffer (all perspectives)"))
      (hoppla/leader-def "br" '(persp-remove-buffer :wk "remove buffer"))
      (hoppla/leader-def "bA" '(persp-add-buffer :wk "add buffer to global perspective"))
      (hoppla/leader-def "bG" '(persp-add-buffer-to-frame-global :wk "add buffer to global perspective"))
      (hoppla/leader-def "Pr" '(persp-rename :wk "rename perspective"))
      (hoppla/leader-def "P]" '(persp-prev :wk "previous perspective"))
      (hoppla/leader-def "P[" '(persp-next :wk "next perspective"))
      (hoppla/leader-def "Pm" '(persp-merge :wk "merge perspective"))
      (hoppla/leader-def "Pu" '(persp-unmerge :wk "unmerge perspective"))
      (hoppla/leader-def "Ps" '(persp-state-save :wk "save all perspectives"))
      (hoppla/leader-def "Pl" '(persp-state-save :wk "load perspectives"))))

#+end_src

** Completion

*** ivy, counsel, swiper

- GitHub
  - [[https://github.com/abo-abo/swiper][ivy, counsel, swiper]]
  - [[https://github.com/Yevgnen/ivy-rich][ivy-rich]]
  - [[https://github.com/radian-software/prescient.el][ivy-prescient]]

- Tips:
  - Use ~C-c C-o~ to open search results in a new buffer

#+begin_src elisp :tangle yes :results silent

  (use-package ivy
    :defer nil
    :diminish ivy-mode
    :general
    (:keymaps 'normal "/" 'swiper)
    (:keymaps 'ivy-minibuffer-map "TAB" 'ivy-alt-done)
    (:keymaps 'ivy-switch-buffer-map "C-d" 'ivy-switch-buffer-kill)
    (:keymaps 'ivy-reverse-i-search-map "C-d" 'ivy-reverse-i-search-kill)
    (:keymaps '(ivy-minibuffer-map ivy-switch-buffer-map ivy-reverse-i-search-map) "C-k" 'ivy-previous-line)
    (:keymaps '(ivy-minibuffer-map ivy-switch-buffer-map ivy-reverse-i-search-map) "C-j" 'ivy-next-line)
    :config
    (ivy-mode 1))
  (use-package counsel
    :general
    (hoppla/leader-def "bs" '(counsel-switch-buffer :wk "switch buffer"))
    (hoppla/leader-def "ff" '(counsel-fzf :wk "find file"))
    (hoppla/leader-def "fr" '(counsel-recentf :wk "find recent file"))
    :config
    (counsel-mode 1))
  (use-package ivy-rich
    :after (ivy counsel)
    :config
    (ivy-rich-mode 1))
  (use-package ivy-prescient
    :after (ivy counsel)
    :init
    (setq ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))


#+end_src

*** company

#+begin_src elisp :tangle yes :results silent

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :general
    (:keymaps 'company-active-map "<tab>" 'company-complete-selection)
    (:keymaps 'lsp-mode-map "<tab>" 'company-indent-or-complete-common)
    :init
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.0))
  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

#+end_src

** Misc

*** no-littering

#+begin_src elisp :tangle yes :results silent

  ;; no-littering is required in init.el
  (no-littering-theme-backups)

#+end_src

*** org-reveal (presentations)

- [[https://github.com/yjwen/org-reveal/][org-reveal]]

#+begin_src elisp :tangle yes :results silent

  (use-package htmlize)
  (use-package ox-reveal
    :after htmlize
    :config
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

#+end_src

** Development

*** Treesitter

#+begin_src elisp :tangle yes :results silent

  (use-package tree-sitter
    :after tree-sitter-langs
    :hook (tree-sitter-mode . tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode))
  (use-package tree-sitter-langs)

#+end_src

*** LSP

#+begin_src elisp :tangle yes :results silent

  (defun hoppla/lsp-mode-setup ())

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . hoppla/lsp-mode-setup)
    :init
    (setq read-process-output-max (* 1 1024 1024))
    (setq lsp-keymap-prefix "C-l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

#+begin_src elisp :tangle yes :results silent

  (use-package lsp-ui
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :init
    (setq lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-ivy

#+begin_src elisp :tangle yes :results silent

  (use-package lsp-ivy
    :after lsp-mode)

#+end_src

*** Languages

**** Python

#+begin_src elisp :tangle yes :results silent

  (use-package python-mode
    :hook (python-mode . lsp-deferred))
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

**** Nix

#+begin_src elisp :tangle yes :results silent

  (use-package lsp-nix
    :ensure lsp-mode
    :after lsp-mode
    :demand t
    :init
    (setq lsp-nix-nil-formatter ["alejandra"])
    (setq lsp-nix-nil-ignored-diagnostic ["unused_binding"]))
  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :mode ("\\.nix\\'" "\\.nix.in\\'"))
  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")
  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))

#+end_src

**** Yaml

#+begin_src elisp :tangle yes :results silent

  (use-package lsp-yaml
    :ensure lsp-mode
    :after lsp-mode
    :demand t)

#+end_src

**** Ansible

#+begin_src elisp :tangle yes :results silent

  (use-package lsp-ansible
    :ensure lsp-mode
    :after lsp-mode
    :demand t)

#+end_src

*** Misc

**** Comments

- [[https://github.com/redguardtoo/evil-nerd-commenter][GitHub]]

#+begin_src elisp :tangle yes :results silent

  (use-package evil-nerd-commenter
    :after evil
    :config
    (evilnc-default-hotkeys))

#+end_src

**** Rainbow Delimiters

#+begin_src elisp :tangle yes :results silent

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Runtime

** Performance

#+begin_src elisp :tangle yes :results silent

  (run-with-idle-timer
   5 nil
   (lambda ()
     (setq file-name-handler-alist file-name-handler-alist-original)
     (makunbound 'file-name-handler-alist-original)
     (message "file-name-handler-alist restored")))

#+end_src
